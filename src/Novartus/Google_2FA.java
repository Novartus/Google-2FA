package Novartus;

// https://github.com/Novartus/

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.SecureRandom;

import com.google.zxing.common.ByteMatrix;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Hex;
import AddOn.TOTP;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;

public class Google_2FA {

    public static void main(String[] args) throws Exception {
        System.setProperty("java.awt.headless", "true"); // This Allows Application To Access The Graphics Processing Capabilities Of The JVM For Making Graphs / Charts / Images To Display On System.
        String MagicKey = getRandomMagicKey();
        String BarCode = getGoogleAuthenticatorBarCode(MagicKey, "email@example.com", "github.com/Novartus");
        String Tmp_Dir = System.getProperty("java.io.tmpdir"); // System Property Indicates The Temporary Directory Used By JVM
        if (!Tmp_Dir.endsWith(File.separator)) {
            Tmp_Dir += File.separator;
        }
        String QR_Path = Tmp_Dir + "2FA-QR-Code.png";
        createQRCode(BarCode, QR_Path, 400, 400);

        System.out.println("\n Configure the Google Authenticator App By Scanning The Following QR code:\n");
        System.out.println(QR_Path + "\n");
        System.out.println("If scan is not working then you can also manually add the secret key:\n");
        System.out.println(MagicKey + "\n");
        System.out.println("Once added to your 2FA Application, then verify that the 6 digit codes generated by Google Authenticator Application\n"
                + "are synchronized with the following :\n");

        String lastCode = null;
        while (true) {
            String code = TOTPCode(MagicKey);
            if (!code.equals(lastCode)) {
                System.out.println(code);
            }
            lastCode = code;
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {};
        }
    }

    public static String getRandomMagicKey() {
        SecureRandom secureRandom = new SecureRandom(); // Cryptographically Random Number Generator (RNG)
        byte[] bytes = new byte[20];
        secureRandom.nextBytes(bytes);
        Base32 base32 = new Base32();
        String MagicKey = base32.encodeToString(bytes);
        return MagicKey.toLowerCase().replaceAll("(.{4})(?=.{4})", "$1 ");
    }


    public static String getGoogleAuthenticatorBarCode(String MagicKey, String userid, String issuer) {
        String normalizedBase32Key = MagicKey.replace(" ", "").toUpperCase();
        try { //Encoding URL
            return "otpauth://totp/"
                    + URLEncoder.encode(issuer + ":" + userid, "UTF-8").replace("+", "%20")
                    + "?secret=" + URLEncoder.encode(normalizedBase32Key, "UTF-8").replace("+", "%20")
                    + "&issuer=" + URLEncoder.encode(issuer, "UTF-8").replace("+", "%20");
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(e);
        }
    }

    public static void createQRCode(String barCodeData, String filePath, int height, int width)
            throws WriterException, IOException {
        ByteMatrix matrix = new MultiFormatWriter().encode(barCodeData, BarcodeFormat.QR_CODE,
                width, height);
        try (FileOutputStream out = new FileOutputStream(filePath)) {
            MatrixToImageWriter.writeToStream(matrix, "png", out);
        }
    }

    public static String TOTPCode(String MagicKey) {
        String normalizedBase32Key = MagicKey.replace(" ", "").toUpperCase();
        Base32 base32 = new Base32();
        byte[] bytes = base32.decode(normalizedBase32Key);
        String hexKey = Hex.encodeHexString(bytes);
        long Time = (System.currentTimeMillis() / 1000) / 30;
        String HexTime = Long.toHexString(Time);
        return TOTP.generateTOTP(hexKey, HexTime, "6");
    }

    /**
     * @param MagicKey Base32 encoded Secret key
     * @param userid The user's account name OR  email address OR a username OR Whatever you like
     * @param issuer The organization managing this account
     * @see https://github.com/google/google-authenticator/wiki/Key-Uri-Format
     **/
   }